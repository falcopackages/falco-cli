[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling",
]

[project]
name = "falco-cli"
description = "Enhance your Django developer experience: CLI and Guides for the Modern Developer."
version = "0.27.0a6"
readme = "README.md"
keywords = [
  "cookiecutter",
  "django",
  "project-template",
  "python",
]
License-Expression = "MIT"
License-File = "LICENSE"
authors = [
  { name = "Tobi DEGNON", email = "tobidegnon@proton.me" },
]
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 4 - Beta",
  "Framework :: Django :: 4",
  "Framework :: Django :: 4.0",
  "Framework :: Django :: 4.1",
  "Framework :: Django :: 4.2",
  "Framework :: Django :: 5.0",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "cappa",
  "cookiecutter",
  "cruft",
  "djlint",
  "httpx",
  "rich",
  "tomlkit",
  "ruff-api<=0.1.0",
]

urls.Documentation = "https://falco.oluwatobi.dev/"
urls.Homepage = "https://falco.oluwatobi.dev/"
urls.Issues = "https://github.com/tobi-de/falco/issues"
urls.Source = "https://github.com/tobi-de/falco"

scripts.falco = "falco_cli.__main__:main"

[dependency-groups]
dev = [
  "coverage[toml]>=6.5",
  "pytest",
  "ipython",
  "pre-commit",
  "django",
  "pytest-cookies",
  "django_htmx",
  "django_extensions",
  "django-model-utils",
  "bump-my-version",
  "pytest-xdist",
  "pyproject-fmt",
]
docs = [
  "sphinx",
  "sphinx-autobuild",
  "myst-parser",
  "shibuya",
  "sphinx-design",
  "sphinx-tabs",
  "sphinx-copybutton",
  "sphinx-togglebutton",
  "sphinxcontrib-mermaid",
  "jupyter-sphinx",
  "ipykernel",
  "sphinx-github-changelog",
  "sphinx-docsearch",
]

[tool.ruff]
exclude = [
  "blueprints/*",
  "demo/*",
  "demo/demo/*/migrations/*",
  "docs/*",
]
lint.extend-ignore = [
  "EM101",
  "I001",
  "I002",
  "S607",
  "TCH001",
  "TCH003",
  "TID252",
  "TRY003",
]
lint.extend-per-file-ignores."demo/config/settings.py" = [
  "S105",
]
lint.extend-per-file-ignores."demo/demo/orders/migrations/*.py" = [
  "RUF012",
]
lint.extend-per-file-ignores."docs/_static/snippets/entry_model.py" = [
  "INP001",
]
lint.extend-per-file-ignores."docs/conf.py" = [
  "A001",
  "INP001",
]
lint.extend-per-file-ignores."src/falco/commands/crud/model_crud.py" = [
  "SLF001",
]
lint.extend-per-file-ignores."src/falco/commands/setup_admin.py" = [
  "N806",
]
lint.extend-per-file-ignores."src/falco/commands/start_project.py" = [
  "N806",
]
lint.extend-per-file-ignores."tests/*" = [
  "ARG001",
  "INP001",
]

[tool.pytest.ini_options]
addopts = "-n auto"
filterwarnings = [
  "ignore::DeprecationWarning",
]
testpaths = [
  "tests",
]

[tool.coverage.paths]
falco = [
  "src/falco",
  "*/falco_cli/src/falco",
]
tests = [
  "tests",
  "*/falco_cli/tests",
]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.coverage.run]
branch = true
omit = [
  "src/falco_cli/__about__.py",
]
parallel = true
source_pkgs = [
  "falco",
  "tests",
]

[tool.bumpversion]
allow_dirty = false
commit = true
commit_args = "--no-verify"
current_version = "0.27.0a6"
ignore_missing_files = false
ignore_missing_version = false
message = "Bump version: {current_version} → {new_version}"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
regex = false
replace = "{new_version}"
search = "{current_version}"
serialize = [
  "{major}.{minor}.{patch}",
]
sign_tags = false
tag = true
tag_message = "Bump version: {current_version} → {new_version}"
tag_name = "v{new_version}"

[[tool.bumpversion.files]]
filename = "pyproject.toml"
replace = 'version = "{new_version}"'
search = 'version = "{current_version}"'

[[tool.bumpversion.files]]
filename = "src/falco_cli/__main__.py"
replace = 'version="{new_version}"'
search = 'version="{current_version}"'

